# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-13 14:04
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('wikiwho', '0006_fake_fkeys'),
    ]

    operations = [
        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_revision_article_id ON public.wikiwho_revision USING btree (article_id);',
            reverse_sql='DROP INDEX public.wikiwho_revision_article_id;'
        ),
        # An index stored in ascending order with nulls first can satisfy either ORDER BY x ASC NULLS LAST or
        # ORDER BY x DESC NULLS FIRST depending on which direction it is scanned in.
        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_revision_timestamp ON public.wikiwho_revision USING btree ("timestamp");',  # by default ASC NULLS LAST
            reverse_sql='DROP INDEX public.wikiwho_revision_timestamp;'
        ),
        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_revision_article_id_ts ON public.wikiwho_revision USING btree (article_id, "timestamp" DESC);',
            reverse_sql='DROP INDEX public.wikiwho_revision_article_id_ts;'
        ),

        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_revisionparagraph_revision_id ON public.wikiwho_revisionparagraph USING btree (revision_id);',
            reverse_sql='DROP INDEX public.wikiwho_revisionparagraph_revision_id;'
        ),
        # migrations.RunSQL(
        #     sql='CREATE INDEX wikiwho_revisionparagraph_paragraph_id ON public.wikiwho_revisionparagraph USING btree (paragraph_id);',
        #     reverse_sql='DROP INDEX public.wikiwho_revisionparagraph_paragraph_id;'
        # ),

        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_paragraphsentence_paragraph_id ON public.wikiwho_paragraphsentence USING btree (paragraph_id);',
            reverse_sql='DROP INDEX public.wikiwho_paragraphsentence_paragraph_id;'
        ),
        # migrations.RunSQL(
        #     sql='CREATE INDEX wikiwho_paragraphsentence_sentence_id ON public.wikiwho_paragraphsentence USING btree (sentence_id);',
        #     reverse_sql='DROP INDEX public.wikiwho_paragraphsentence_sentence_id;'
        # ),

        migrations.RunSQL(
            sql='CREATE INDEX wikiwho_sentencetoken_sentence_id ON public.wikiwho_sentencetoken USING btree (sentence_id);',
            reverse_sql='DROP INDEX public.wikiwho_sentencetoken_sentence_id;'
        ),
        # migrations.RunSQL(
        #     sql='CREATE INDEX wikiwho_sentencetoken_token_id ON public.wikiwho_sentencetoken USING btree (token_id);',
        #     reverse_sql='DROP INDEX public.wikiwho_sentencetoken_token_id;'
        # ),
    ]

    # HACK: always fake. These fields are actually not FK on db.
    # This is done to use django's fk queries, emulated cascaded deletion
    def apply(self, project_state, schema_editor, collect_sql=False):
        return project_state.clone()
        # return project_state

    def unapply(self, project_state, schema_editor, collect_sql=False):
        return project_state.clone()
        # return project_state
